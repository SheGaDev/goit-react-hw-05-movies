{"version":3,"file":"static/js/0.52033479.chunk.js","mappings":"kPA0BA,EAxBgB,SAAHA,GAA0C,IAApCC,EAAOD,EAAPC,QAKjB,OACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sBAAqBC,SAChCH,EAAQI,KAAI,SAACC,GACZ,OACEC,EAAAA,EAAAA,MAAA,MAAIJ,UAAU,0BAAyBC,SAAA,EACrCF,EAAAA,EAAAA,KAAA,OACEM,KAVMC,EAUQH,EAAOI,aAT/BD,EAAI,+CAAAE,OAC+CF,GAC/C,+EAQMG,MAAO,GACPC,OAAQ,GACRC,IAAKR,EAAOS,iBAEdb,EAAAA,EAAAA,KAAA,QAAAE,SAAOE,EAAOU,SAP6BV,EAAOW,IAR3C,IAACR,CAkBd,KAGN,ECFA,EAhBiB,WACf,IAAAS,GAA8BC,EAAAA,EAAAA,UAAwB,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApDjB,EAAOmB,EAAA,GAAEE,EAAUF,EAAA,GAClBG,GAAYC,EAAAA,EAAAA,MAAZD,QAWR,OATAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,eAAA1B,GAAA2B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACOC,EAAAA,EAAAA,GAAM,CAAEC,KAAM,UAAWC,SAAUhB,IAAW,KAAD,EAA9DQ,EAAQG,EAAAM,KACNR,EAASD,EAATC,KACRV,EAAWU,GAAM,wBAAAE,EAAAO,OAAA,GAAAX,EAAA,KAClB,kBAJc,OAAA9B,EAAA0C,MAAA,KAAAC,UAAA,KAKfjB,GACF,GAAG,KAEIxB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,SAAEH,IAAWC,EAAAA,EAAAA,KAAC0C,EAAO,CAAC3C,QAASA,KAC7D,C,4ECXM4C,E,OAAMC,EAAMC,OAAO,CACvBC,QAAS,gCACTC,QAAS,CACPC,OAAQ,CACNC,cACE,iOAIFC,EAAS,CACbC,SAAU,iBAAM,oBAAoB,EACpCC,OAAQ,SAAAtD,GAAA,IAAGuD,EAAKvD,EAALuD,MAAK,4BAAA5C,OAAwC4C,EAAK,EAC7DC,QAAS,SAAAC,GAAA,IAAGlB,EAAQkB,EAARlB,SAAQ,eAAA5B,OAA2B4B,EAAQ,EACvDtC,QAAS,SAAAyD,GAAA,IAAGnB,EAAQmB,EAARnB,SAAQ,eAAA5B,OAA2B4B,EAAQ,aACvDoB,QAAS,SAAAC,GAAA,IAAGrB,EAAQqB,EAARrB,SAAQ,eAAA5B,OAA2B4B,EAAQ,cAEnDF,EAAK,eAAAwB,GAAAlC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EACZgC,GAAe,OAAAlC,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAA6B,OAAA,SAERlB,EAAIO,EAAOU,EAAKxB,MAAMwB,IAAOE,MAAK,SAACC,GAAC,OAAKA,EAAEH,IAAI,KAAC,wBAAA5B,EAAAO,OAAA,GAAAX,EAAA,KACxD,gBAJUoC,GAAA,OAAAL,EAAAnB,MAAA,KAAAC,UAAA,I","sources":["components/cast/Cast.tsx","pages/CastPage.tsx","services/index.ts"],"sourcesContent":["import { Cast } from '@types';\n\nconst Credits = ({ credits }: { credits: Cast[] }) => {\n  const imageURL = (path: string) =>\n    path\n      ? `https://image.tmdb.org/t/p/w90_and_h90_face/${path}`\n      : 'https://ireland.apollo.olxcdn.com/v1/files/0iq0gb9ppip8-UA/image;s=1000x700';\n  return (\n    <ul className='flex flex-col gap-2'>\n      {credits.map((credit) => {\n        return (\n          <li className='flex items-center gap-2' key={credit.id}>\n            <img\n              src={imageURL(credit.profile_path)}\n              width={90}\n              height={90}\n              alt={credit.original_name}\n            />\n            <span>{credit.name}</span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Credits;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetch } from 'src/services';\nimport type { CastData, Cast } from '@types';\nimport Credits from '../components/cast/Cast';\n\nconst CastPage = () => {\n  const [credits, setCredits] = useState<Cast[] | null>(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      const response = await fetch({ type: 'credits', movie_id: movieId });\n      const { cast } = response as CastData;\n      setCredits(cast);\n    };\n    fetchCast();\n  }, []);\n\n  return <div className='mt-2'>{credits && <Credits credits={credits} />}</div>;\n};\n\nexport default CastPage;\n","import axios from 'axios';\nimport type {\n  FetchTMDB,\n  MergeReviewsData,\n  MergeSearchMoviesData,\n  MergeTrendingData,\n  MovieData,\n  CastData,\n} from '@types';\nconst ins = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  headers: {\n    common: {\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2Yzk5YTFkNDk2NTg1YmM2MmUwOTE1MDU5MzM1N2U2YyIsInN1YiI6IjY1MDliZDY1ZmEyN2Y0MDBjYWE1YWZjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WV0FmxQBPlefUu-pNpyZjtL2hGpndkjU9O_F-hxAuRY',\n    },\n  },\n});\nconst routes = {\n  trending: () => 'trending/movie/day',\n  search: ({ query }: FetchTMDB) => `search/movie?query=${query}`,\n  details: ({ movie_id }: FetchTMDB) => `movie/${movie_id}`,\n  credits: ({ movie_id }: FetchTMDB) => `movie/${movie_id}/credits`,\n  reviews: ({ movie_id }: FetchTMDB) => `movie/${movie_id}/reviews`,\n};\nconst fetch = async (\n  data: FetchTMDB\n): Promise<MergeTrendingData | MergeSearchMoviesData | MovieData | MergeReviewsData | CastData> => {\n  return ins(routes[data.type](data)).then((r) => r.data);\n};\nexport { fetch };\n"],"names":["_ref","credits","_jsx","className","children","map","credit","_jsxs","src","path","profile_path","concat","width","height","alt","original_name","name","id","_useState","useState","_useState2","_slicedToArray","setCredits","movieId","useParams","useEffect","fetchCast","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","cast","wrap","_context","prev","next","fetch","type","movie_id","sent","stop","apply","arguments","Credits","ins","axios","create","baseURL","headers","common","Authorization","routes","trending","search","query","details","_ref2","_ref3","reviews","_ref4","_ref5","data","abrupt","then","r","_x"],"sourceRoot":""}