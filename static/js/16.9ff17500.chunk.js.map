{"version":3,"file":"static/js/16.9ff17500.chunk.js","mappings":"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","sources":["components/search/Search.tsx","components/movie/Movie.tsx","pages/MoviesPage.tsx","services/index.ts"],"sourcesContent":["import { useState, FormEvent } from 'react';\nimport { FaSearch } from 'react-icons/fa/index';\n\nconst Search = ({ onSubmit }: { onSubmit: (value: string) => void }) => {\n  const [search, setSearch] = useState<string>('');\n  const submitSearch = (e: FormEvent) => {\n    e.preventDefault();\n    onSubmit(search);\n  };\n  return (\n    <form className='max-w-[360px]' onSubmit={submitSearch}>\n      <label className='flex flex-col gap-2'>\n        <b>Search Movies:</b>\n        <div className='relative h-[36px] w-[360px]'>\n          <input\n            className='h-[36px] w-[360px] rounded pl-[40px] pr-[8px]'\n            type='text'\n            value={search}\n            onChange={(e) => setSearch(e.target.value)}\n          />\n          <button className='absolute left-0 top-0 rounded bg-black'>\n            <FaSearch fill='white' className='h-[36px] w-[36px] p-[8px] hover:fill-[#c1c1c1]' />\n          </button>\n        </div>\n      </label>\n    </form>\n  );\n};\n\nexport default Search;\n","import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport Search from '../search/Search';\nimport type { MergeSearchMoviesData, SearchMovies } from '@types';\nimport { fetch } from '../../services';\n\nconst Movies = () => {\n  const [query, setQuery] = useState<string | null>('');\n  const [movies, setMovies] = useState<SearchMovies[] | null>(null);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await fetch({ type: 'search', query: query as string });\n      const { results } = response as MergeSearchMoviesData;\n      setMovies(results);\n    };\n    if (query === '' && searchParams) setQuery(searchParams.get('title'));\n    if (query) fetchMovies();\n  }, [query]);\n\n  const onSubmit = (value: string) => {\n    setSearchParams(`?title=${value}`);\n    setMovies(null);\n    setQuery(value);\n  };\n\n  return (\n    <>\n      <Search onSubmit={onSubmit} />\n      {movies && (\n        <ul>\n          {movies.map((movie) => {\n            return (\n              <li key={movie.id}>\n                <Link to={`/goit-react-hw-05-movies/movie/${movie.id}`} state={{ from: location }}>\n                  {movie.title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import Movies from '../components/movie/Movie';\n\nconst MoviesPage = () => {\n  return <Movies></Movies>;\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\nimport type {\n  FetchTMDB,\n  MergeReviewsData,\n  MergeSearchMoviesData,\n  MergeTrendingData,\n  MovieData,\n  CastData,\n} from '@types';\nconst ins = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  headers: {\n    common: {\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2Yzk5YTFkNDk2NTg1YmM2MmUwOTE1MDU5MzM1N2U2YyIsInN1YiI6IjY1MDliZDY1ZmEyN2Y0MDBjYWE1YWZjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WV0FmxQBPlefUu-pNpyZjtL2hGpndkjU9O_F-hxAuRY',\n    },\n  },\n});\nconst routes = {\n  trending: () => 'trending/movie/day',\n  search: ({ query }: FetchTMDB) => `search/movie?query=${query}`,\n  details: ({ movie_id }: FetchTMDB) => `movie/${movie_id}`,\n  credits: ({ movie_id }: FetchTMDB) => `movie/${movie_id}/credits`,\n  reviews: ({ movie_id }: FetchTMDB) => `movie/${movie_id}/reviews`,\n};\nconst fetch = async (\n  data: FetchTMDB\n): Promise<MergeTrendingData | MergeSearchMoviesData | MovieData | MergeReviewsData | CastData> => {\n  return ins(routes[data.type](data)).then((r) => r.data);\n};\nexport { fetch };\n"],"names":["_ref","onSubmit","_useState","useState","_useState2","_slicedToArray","search","setSearch","_jsx","className","e","preventDefault","children","_jsxs","type","value","onChange","target","FaSearch","fill","query","setQuery","_useState3","_useState4","movies","setMovies","location","useLocation","_useSearchParams","useSearchParams","_useSearchParams2","searchParams","setSearchParams","useEffect","fetchMovies","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","results","wrap","_context","prev","next","fetch","sent","stop","apply","arguments","get","_Fragment","Search","concat","map","movie","Link","to","id","state","from","title","Movies","ins","axios","create","baseURL","headers","common","Authorization","routes","trending","details","_ref2","movie_id","credits","_ref3","reviews","_ref4","_ref5","data","abrupt","then","r","_x"],"sourceRoot":""}