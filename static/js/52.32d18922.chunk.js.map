{"version":3,"file":"static/js/52.32d18922.chunk.js","mappings":"oPAqBA,EAnBgB,SAAHA,GAAwD,IAAlDC,EAAOD,EAAPC,QACjB,OACEC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,sBAAqBC,SAChCH,EAAQI,KAAI,SAACC,GACZ,OACEC,EAAAA,EAAAA,MAAA,MAAoBJ,UAAU,sBAAqBC,SAAA,EACjDF,EAAAA,EAAAA,KAAA,MAAAE,UACEG,EAAAA,EAAAA,MAAA,KAAAH,SAAA,CAAG,WAASE,EAAOE,aAErBD,EAAAA,EAAAA,MAAA,QAAAH,SAAA,EACEF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,YAAW,IAAEE,EAAOG,aALlBH,EAAOI,GASpB,KAGN,ECMA,EAnBoB,WAClB,IAAAC,GAA8BC,EAAAA,EAAAA,UAAsC,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlEV,EAAOY,EAAA,GAAEE,EAAUF,EAAA,GAClBG,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,eAAAnB,GAAAoB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,GACIC,EAAAA,EAAAA,GAAM,CAAEC,KAAM,UAAWC,SAAUhB,IAAW,KAAD,EAA9DQ,EAAQG,EAAAM,KACNR,EAAYD,EAAZC,QACRV,EAAWU,GAAS,wBAAAE,EAAAO,OAAA,GAAAX,EAAA,KACrB,kBAJiB,OAAAvB,EAAAmC,MAAA,KAAAC,UAAA,KAKlBjB,GACF,GAAG,KAEDjB,EAAAA,EAAAA,KAAAmC,EAAAA,SAAA,CAAAjC,SACGH,GAAWA,EAAQqC,QAASpC,EAAAA,EAAAA,KAACqC,EAAO,CAACtC,QAASA,KAAcC,EAAAA,EAAAA,KAAA,QAAAE,SAAM,wBAGzE,C,4ECdMoC,E,OAAMC,EAAMC,OAAO,CACvBC,QAAS,gCACTC,QAAS,CACPC,OAAQ,CACNC,cACE,iOAIFC,EAAS,CACbC,SAAU,iBAAM,oBAAoB,EACpCC,OAAQ,SAAAjD,GAAA,IAAGkD,EAAKlD,EAALkD,MAAK,4BAAAC,OAAwCD,EAAK,EAC7DE,QAAS,SAAAC,GAAA,IAAGrB,EAAQqB,EAARrB,SAAQ,eAAAmB,OAA2BnB,EAAQ,EACvDsB,QAAS,SAAAC,GAAA,IAAGvB,EAAQuB,EAARvB,SAAQ,eAAAmB,OAA2BnB,EAAQ,aACvD/B,QAAS,SAAAuD,GAAA,IAAGxB,EAAQwB,EAARxB,SAAQ,eAAAmB,OAA2BnB,EAAQ,cAEnDF,EAAK,eAAA2B,GAAArC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EACZmC,GAAe,OAAArC,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAgC,OAAA,SAERnB,EAAIO,EAAOW,EAAK3B,MAAM2B,IAAOE,MAAK,SAACC,GAAC,OAAKA,EAAEH,IAAI,KAAC,wBAAA/B,EAAAO,OAAA,GAAAX,EAAA,KACxD,gBAJUuC,GAAA,OAAAL,EAAAtB,MAAA,KAAAC,UAAA,I","sources":["components/reviews/Reviews.tsx","pages/ReviewsPage.tsx","services/index.ts"],"sourcesContent":["import type { ReviewsDataAuthors } from '@types';\n\nconst Reviews = ({ reviews }: { reviews: ReviewsDataAuthors[] }) => {\n  return (\n    <ul className='flex flex-col gap-3'>\n      {reviews.map((review) => {\n        return (\n          <li key={review.id} className='flex flex-col gap-1'>\n            <h3>\n              <b>Author: {review.author}</b>\n            </h3>\n            <span>\n              <b>Review:</b> {review.content}\n            </span>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default Reviews;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetch } from 'src/services';\nimport type { MergeReviewsData, ReviewsDataAuthors } from '@types';\nimport Reviews from '../components/reviews/Reviews';\n\nconst ReviewsPage = () => {\n  const [reviews, setReviews] = useState<ReviewsDataAuthors[] | null>(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const response = await fetch({ type: 'reviews', movie_id: movieId });\n      const { results } = response as MergeReviewsData;\n      setReviews(results);\n    };\n    fetchReviews();\n  }, []);\n  return (\n    <>\n      {reviews && reviews.length ? <Reviews reviews={reviews} /> : <span>Not found reviews.</span>}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n","import axios from 'axios';\nimport type {\n  FetchTMDB,\n  MergeReviewsData,\n  MergeSearchMoviesData,\n  MergeTrendingData,\n  MovieData,\n  CastData,\n} from '@types';\nconst ins = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  headers: {\n    common: {\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2Yzk5YTFkNDk2NTg1YmM2MmUwOTE1MDU5MzM1N2U2YyIsInN1YiI6IjY1MDliZDY1ZmEyN2Y0MDBjYWE1YWZjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WV0FmxQBPlefUu-pNpyZjtL2hGpndkjU9O_F-hxAuRY',\n    },\n  },\n});\nconst routes = {\n  trending: () => 'trending/movie/day',\n  search: ({ query }: FetchTMDB) => `search/movie?query=${query}`,\n  details: ({ movie_id }: FetchTMDB) => `movie/${movie_id}`,\n  credits: ({ movie_id }: FetchTMDB) => `movie/${movie_id}/credits`,\n  reviews: ({ movie_id }: FetchTMDB) => `movie/${movie_id}/reviews`,\n};\nconst fetch = async (\n  data: FetchTMDB\n): Promise<MergeTrendingData | MergeSearchMoviesData | MovieData | MergeReviewsData | CastData> => {\n  return ins(routes[data.type](data)).then((r) => r.data);\n};\nexport { fetch };\n"],"names":["_ref","reviews","_jsx","className","children","map","review","_jsxs","author","content","id","_useState","useState","_useState2","_slicedToArray","setReviews","movieId","useParams","useEffect","fetchReviews","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","results","wrap","_context","prev","next","fetch","type","movie_id","sent","stop","apply","arguments","_Fragment","length","Reviews","ins","axios","create","baseURL","headers","common","Authorization","routes","trending","search","query","concat","details","_ref2","credits","_ref3","_ref4","_ref5","data","abrupt","then","r","_x"],"sourceRoot":""}